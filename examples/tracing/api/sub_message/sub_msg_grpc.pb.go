// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sub_message

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GetSubMessageServiceClient is the client API for GetSubMessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetSubMessageServiceClient interface {
	GetSubMessage(ctx context.Context, in *GetSubMessageReq, opts ...grpc.CallOption) (*GetSubMessageReply, error)
}

type getSubMessageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGetSubMessageServiceClient(cc grpc.ClientConnInterface) GetSubMessageServiceClient {
	return &getSubMessageServiceClient{cc}
}

func (c *getSubMessageServiceClient) GetSubMessage(ctx context.Context, in *GetSubMessageReq, opts ...grpc.CallOption) (*GetSubMessageReply, error) {
	out := new(GetSubMessageReply)
	err := c.cc.Invoke(ctx, "/api.subMessage.v1.GetSubMessageService/GetSubMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetSubMessageServiceServer is the server API for GetSubMessageService service.
// All implementations must embed UnimplementedGetSubMessageServiceServer
// for forward compatibility
type GetSubMessageServiceServer interface {
	GetSubMessage(context.Context, *GetSubMessageReq) (*GetSubMessageReply, error)
	mustEmbedUnimplementedGetSubMessageServiceServer()
}

// UnimplementedGetSubMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGetSubMessageServiceServer struct {
}

func (UnimplementedGetSubMessageServiceServer) GetSubMessage(context.Context, *GetSubMessageReq) (*GetSubMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubMessage not implemented")
}
func (UnimplementedGetSubMessageServiceServer) mustEmbedUnimplementedGetSubMessageServiceServer() {}

// UnsafeGetSubMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetSubMessageServiceServer will
// result in compilation errors.
type UnsafeGetSubMessageServiceServer interface {
	mustEmbedUnimplementedGetSubMessageServiceServer()
}

func RegisterGetSubMessageServiceServer(s grpc.ServiceRegistrar, srv GetSubMessageServiceServer) {
	s.RegisterService(&GetSubMessageService_ServiceDesc, srv)
}

func _GetSubMessageService_GetSubMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetSubMessageServiceServer).GetSubMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.subMessage.v1.GetSubMessageService/GetSubMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetSubMessageServiceServer).GetSubMessage(ctx, req.(*GetSubMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GetSubMessageService_ServiceDesc is the grpc.ServiceDesc for GetSubMessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetSubMessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.subMessage.v1.GetSubMessageService",
	HandlerType: (*GetSubMessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSubMessage",
			Handler:    _GetSubMessageService_GetSubMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sub_msg.proto",
}
